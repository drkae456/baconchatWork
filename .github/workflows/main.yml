name: Build, Push Docker Image, and Redeploy with Terraform
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: baconchatwork.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -f ./docker/WebApp/Dockerfile -t baconchatwork.azurecr.io/baconchatportfolio:latest .
          docker push baconchatwork.azurecr.io/baconchatportfolio:latest

      - name: Log in to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars <<EOF
          subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          client_id       = "${{ secrets.AZURE_CLIENT_ID }}"
          client_secret   = "${{ secrets.AZURE_CLIENT_SECRET }}"
          tenant_id       = "${{ secrets.AZURE_TENANT_ID }}"
          EOF

      - name: Terraform Init
        run: terraform init

      # First, try to import if the resource exists
      - name: Import existing container if it exists
        run: |
          if az container show -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n baconchat-webapp &>/dev/null; then
            echo "Container exists. Importing into Terraform state..."
            terraform import azurerm_container_group.aci "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.ContainerInstance/containerGroups/baconchat-webapp" || true
          fi
        continue-on-error: true

      # Plan and check for changes
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan || echo "::set-output name=has_changes::true"
        continue-on-error: true

      # Apply if there are infrastructure changes
      - name: Apply Infrastructure Changes
        if: steps.plan.outputs.has_changes == 'true'
        run: |
          echo "Applying infrastructure changes with Terraform..."
          terraform apply -auto-approve tfplan

      # If no infrastructure changes, just restart the container
      - name: Restart Container if No Infrastructure Changes
        if: steps.plan.outputs.has_changes != 'true'
        run: |
          echo "No infrastructure changes detected. Restarting container to pick up new image..."
          az container restart -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n baconchat-webapp
